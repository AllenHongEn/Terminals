using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kohl.Framework.Info;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Terminals")]
[assembly: AssemblyDescription("Terminals is a multi-tab terminal services and remote desktop client. Moreover Terminals is capable beside RDP of supporting AutoIt, a shell explorer, http connections, ICA/Citrix connections, telnet, ssh, VNC and many other protocols.")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Oliver Kohl D.Sc.")]
[assembly: AssemblyProduct("Terminals by Oliver Kohl D.Sc.")]
[assembly: AssemblyCopyright("Copyright Â© Oliver Kohl D.Sc. 2016")]
[assembly: AssemblyTrademark("http://www.kohl.bz")]
[assembly: AssemblyCulture("")]
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
[assembly: AssemblyVersion ("4.9.1.0")]
[assembly: AssemblyFileVersion("4.9.1.0")]
[assembly: AssemblyInformationalVersion("4.9.1 TESTING")]
[assembly: AssemblyTimeStampAttribute("30.08.2016 12:30:00")]
/*
AssemblyVersion

Where other assemblies that reference your assembly will look. If this number changes, other assemblies have to update their references to your assembly! The AssemblyVersion is required.

I use the format: major.minor. This would result in:
[assembly: AssemblyVersion("1.0")] 

 AssemblyFileVersion

Used for deployment. You can increase this number for every deployment. It is used by setup programs. Use it to mark assemblies that have the same AssemblyVersion, but are generated from different builds.

In Windows, it can be viewed in the file properties.

If possible, let it be generated by MSBuild. The AssemblyFileVersion is optional. If not given, the AssemblyVersion is used.

I use the format: major.minor.revision.build, where I use revision for development stage (Alpha, Beta, RC and RTM), service packs and hot fixes. This would result in:
[assembly: AssemblyFileVersion("1.0.3100.1242")] 

 AssemblyInformationalVersion

The Product version of the assembly. This is the version you would use when talking to customers or for display on your website. This version can be a string, like '1.0 Release Candidate'. Unfortunately, when you use a string, it will generate a false warning -- already reported to Microsoft (fixed in VS2010). The AssemblyInformationalVersion is optional. If not given, the AssemblyVersion is used.

I use the format: major.minor [revision as string]. This would result in:
[assembly: AssemblyInformationalVersion("1.0 RC1")] 
*/
[assembly: Guid("76d9dac2-b9e2-44d8-ae9c-22a4585e14e3")]
[assembly: AssemblyFlags(AssemblyNameFlags.PublicKey | AssemblyNameFlags.EnableJITcompileOptimizer)]
